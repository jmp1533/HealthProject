package com.L3_1team.health.Utility.Page;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.util.FileCopyUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.multipart.commons.CommonsMultipartFile;

import org.springframework.web.servlet.ModelAndView;

@Controller
public class Ajaxupload {
	@RequestMapping("/se.do")
	public String d(){
		return "fileUpload";
	}
	
	
	
	@RequestMapping("/utility/page/Ajaxuplod")
    public @ResponseBody String mybatistest(HttpServletRequest request,	HttpSession session) throws IOException{



        MultipartHttpServletRequest multi = (MultipartHttpServletRequest) request;
  
        MultipartFile file = multi.getFile("agentInstallFile");//jsp 페이지에서 input type="file"의 파라미터명
    
         String path=	session.getServletContext().getRealPath("/resources/uploadG");
         
         String savefilename=UUID.randomUUID() +"_" ;     
         if(file!=null){
        String p=file.getContentType().substring(6);
          System.out.println("파라미터명" + p);
          System.out.println("파일크기" + file.getSize());
          System.out.println("파일 존재" + file.isEmpty());
          System.out.println("오리지날 파일 이름" + file.getOriginalFilename());
        
          
      
      	FileOutputStream fos=null;
		InputStream is=null;     
          String organizedfilePath="";
          
          try {
      		fos=new FileOutputStream(path + "/" + savefilename+file.getOriginalFilename());
			//전송된 파일을 읽어오기 위한 스트림객체 생성
			is=file.getInputStream();
			//파일 복사하기
			FileCopyUtils.copy(is,fos);
			System.out.println("파일업로드 성공!");
 
              
          } catch (Exception e) {
              // TODO: handle exception
              e.printStackTrace();
 
          } finally {
 
          }
         
         }    
         return savefilename+file.getOriginalFilename();
        
    
                
    }
	
	
	
	
	@RequestMapping(value = "/seImgInsert", method = RequestMethod.POST)
	 public @ResponseBody String seImgInsert(
			 
	   @RequestParam(value = "update_image") CommonsMultipartFile update_image,
	   HttpServletRequest request
	   ) {
	  String bindName = Util.saveImgFromSE(update_image,request);
	  return bindName;
	 }
	@RequestMapping(value = "/otherImgInsert", method = RequestMethod.POST)
	 public @ResponseBody String otherImgInsert(
			 
	   @RequestParam(value = "other_image") CommonsMultipartFile update_image,
	   HttpServletRequest request
	   ) {
	  String bindName = Util.saveImgFromSE(update_image,request);
	  return bindName;
	 }
	
	
	
	
	
	
	
	
	
	
	

}

package com.L3_1team.health.controller.client.menu;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.ibatis.annotations.Param;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.L3_1team.health.dto.client.menu.Mypage_management_Dto;
import com.L3_1team.health.dto.client.user.Mypage_outDto;
import com.L3_1team.health.dto.client.user.UserDto;
import com.L3_1team.health.dto.client.user.UserValDto;
import com.L3_1team.health.service.client.menu.Mypage_user_Service;
import com.L3_1team.health.validation.UserSignupValidator;

@Controller
public class Mypage_user_Controller {
	@Inject Mypage_user_Service user_Service;
	
	public void setUser_Service(Mypage_user_Service user_Service) {
		this.user_Service = user_Service;
	}
	
	@RequestMapping(value = "/client/menu/mypage/Mypage", method = RequestMethod.GET)
	public String mypageForm(){
		return ".client.menu.mypage.Mypage";
	}
	
	@RequestMapping(value="/client/menu/mypage/user/User_info", method=RequestMethod.GET)
	public String info(HttpServletRequest request, Model model){
		String u_id = (String)request.getSession().getAttribute("ulogid");
		UserDto dto=user_Service.getinfo(u_id);
		model.addAttribute("dto", dto);
		return ".client.menu.mypage.user.User_info";
	}
	
	@RequestMapping(value = "/client/menu/mypage/Update", method = RequestMethod.GET)
	public String updateForm(){
		return ".client.menu.mypage.Update";
	}
	
	@RequestMapping(value = "/client/menu/mypage/User_update", method = RequestMethod.POST)
	public String updatesearch(@Param("pwd")String pwd, HttpServletRequest request, Model model){
		HashMap<String, String> map = new HashMap<String, String>();

		String ulogid = (String)request.getSession().getAttribute("ulogid");
		
		if(ulogid != null){
			map.put("u_id", ulogid);
			map.put("u_pwd", pwd);
			
			UserDto userDto = user_Service.search(map);
			
			try{
				UserValDto valDto = temp(userDto);
				model.addAttribute("valDto", valDto);
				return ".client.menu.mypage.user.User_update";
			}catch(Exception e){
				return ".client.menu.mypage.Update";
			}
		}else{
			return ".client.menu.mypage.Update";
		}
	}
	
	public UserValDto temp(UserDto userDto){
		String addr[] = userDto.getU_addr().split("&");
		String phone[] = userDto.getU_phone().split("-");
		String email[] = userDto.getU_email().split("@");
		
		return new UserValDto(userDto.getU_id(), null, null, userDto.getU_question(), 
				userDto.getU_answer(), userDto.getU_name(), userDto.getU_birth(), 
				userDto.getU_gender(), userDto.getU_zipcode(), addr[0], addr[1], phone[0], 
				phone[1], phone[2], email[0], email[1], userDto.getU_targetweight(), 
				userDto.getU_img());
	}
	
	@RequestMapping(value = "/client/menu/mypage/UpdateOk", method = RequestMethod.POST)
	public String update(@ModelAttribute("uservalDto") UserValDto uservalDto,
						BindingResult result, HttpSession session, MultipartFile file1){
		
		System.out.println(uservalDto.toString());
		
		new UserSignupValidator().validate(uservalDto, result);
		if (result.hasErrors()) {
			return ".client.menu.mypage.user.User_update";
		}

		String orgfilename = file1.getOriginalFilename();
		String savefilename = UUID.randomUUID() + "_" + orgfilename;
		String path = session.getServletContext().getRealPath("/resources/upload");
		FileOutputStream fos = null;
		InputStream is = null;

		try {
			fos = new FileOutputStream(path + "/" + savefilename);
			is = file1.getInputStream();
			FileCopyUtils.copy(is, fos);
			System.out.println("파일업로드 성공");
			
			UserDto userDto = temp(uservalDto, savefilename);
			int n = user_Service.update(userDto);

			if (n > 0) {
				return ".client.menu.mypage.Mypage";
			} else {
				return ".client.menu.mypage.user.User_update";
			}
		} catch (Exception ie) {
			System.out.println(ie.getMessage());
			return ".client.menu.mypage.user.User_update";
		} finally {
			try {
				if (is != null)is.close();
				if (fos != null)fos.close();
			} catch (IOException ie) {}
		}
	}
	
	public UserDto temp(UserValDto uservalDto, String savefilename) {
		String uid = uservalDto.getId1();
		String upwd = uservalDto.getPwd1();
		int uquestion = uservalDto.getQuestion1();
		String uanswer = uservalDto.getAnswer1();
		String uname = uservalDto.getName1();
		String uimg = savefilename;
		String uphone = uservalDto.getPhone1() + "-" + uservalDto.getPhone2()
				+ "-" + uservalDto.getPhone3();
		String uemail = uservalDto.getEmail1() + "@" + uservalDto.getEmail2();
		String uzipcode = uservalDto.getZipcode1();
		String uaddr = uservalDto.getAddr1() + "&" + uservalDto.getAddr2();
		String ubirth = uservalDto.getBirth1();
		int ugender = uservalDto.getGender1();
		float utargetweight = uservalDto.getTargetweight1();

		return new UserDto(uid, upwd, uquestion, uanswer, uname, uimg, uphone,
				uemail, uzipcode, uaddr, ubirth, ugender, utargetweight, null,
				1);
	}
	
	//회원탈퇴
	@RequestMapping(value = "/client/menu/mypage/user/User_out_pwd", method = RequestMethod.GET)
	public String outForm(){
		return ".client.menu.mypage.user.User_out_pwd";
	}
	
	@RequestMapping(value = "/client/menu/mypage/user/User_out_pwd", method = RequestMethod.POST)
	public String out(
			@RequestParam("pwd")String u_pwd,
			@RequestParam(value="out_reason",defaultValue="0")String out_reason,
			HttpServletRequest request ){
		
		
		if(out_reason.equals("0")){
			return "/client/menu/mypage/user/User_out_pwd";
		}
		
		HashMap<String, String> map = new HashMap<String, String>();
		String u_id = (String)request.getSession().getAttribute("ulogid");
			map.put("u_id", u_id);
			map.put("u_pwd", u_pwd);
			
			int n=user_Service.search1(map);
			if(n==1){
				
				Mypage_outDto outDto=new Mypage_outDto(0, u_id, out_reason, null);
				
				user_Service.out(outDto, u_id);
				
				request.getSession().invalidate();
				
				return ".user.main";
			}else{
				return "/client/menu/mypage/user/User_out_pwd";
			}
	}
	
	
	//유저-마이페이지-내트레이너 정보
	//User_mytrainer_info
	@RequestMapping("/client/menu/mypage/user/User_mytrainer_info")
	public String User_mytrainer_info(HttpServletRequest request, Model model){
		String u_id = (String)request.getSession().getAttribute("ulogid");
		
		Mypage_management_Dto dto=user_Service.mytrainer(u_id);
		model.addAttribute("dto", dto);
		
		return ".client.menu.mypage.user.User_mytrainer_info";
	}
	
	
}
